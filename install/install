#!/bin/bash
#
#	(c) 2000-2012 uzERP LLP (support#uzerp.com). All rights reserved.
#
#	Released under GPLv3 license; see LICENSE.
#
#
# install
#
#
# $Revision: 1.12 $
#
# installs a new instance into the target code base
#

# Absolute path to this script
SCRIPT=$(readlink -f $0)

# Absolute path this script is in
SCRIPTPATH=`dirname $SCRIPT`
install_dir=`basename $SCRIPTPATH`

#
logfile=$SCRIPTPATH/install.log
clear
echo "-----------------------------------------------------------------"
rundate=`date`
echo "uzERP Installation - started $rundate"
echo "-----------------------------------------------------------------"
echo "uzERP Installation - started $rundate" > $logfile
echo ""
echo "" >> $logfile
echo "┌────────────────────────────────────────────────────────────────┐"
echo "│                      Checking environment                      │"
echo "└────────────────────────────────────────────────────────────────┘"
echo ""
echo "┌────────────────────────────────────────────────────────────────┐" >> $logfile
echo "│                      Checking environment                      │" >> $logfile
echo "└────────────────────────────────────────────────────────────────┘" >> $logfile
echo "" >> $logfile
#
continue=Y

apache_root=`apache2ctl -V 2>/dev/null | grep HTTPD_ROOT | cut -s -d'"' -f2`
apache_conf=`apache2ctl -V 2>/dev/null | grep SERVER_CONFIG_FILE | cut -s -d'"' -f2`
if [ "$apache_root" != "" ]
then
  apache_conf=${apache_root}/${apache_conf}
fi
if [ "$apache_conf" = "" ]
then
  envcheck="Apache not installed\n"
  continue=N
else
  required=`apache2 -v 2>/dev/null`
  echo "$required" >> $logfile
  echo "----------------------------------------------------" >> $logfile
  envcheck="Apache is present\n"
#
# should check run pid to see if apache is running
#
  if [ "$apache_root" = "" ]
  then
    apache_root=`cat $apache_conf | grep ^ServerRoot | cut -s -d'"' -f2`
  fi
  apache_user=`grep APACHE_RUN_USER $apache_root/* | cut -s -d'=' -f2`
  apache=`apache2ctl -M 2>/dev/null`
  php_mod=`echo "$apache" | grep php5_module`
  if [ "$php_mod" = "" ]
  then
    envcheck="${envcheck}Apache PHP module not installed\n"
    continue=N
  else
    echo "Apache php5 module is present" >> $logfile
    envcheck="${envcheck}Apache PHP module is present\n"
  fi
fi
#
# the following makes use of php command line interface (cli)
# which does not need to be installed, but without it, how do
# I know whether php is installed!?!?!
#
required=`php -v 2>/dev/null`
if [ $? -ne 0 ]
then
  envcheck="${envcheck}PHP CLI not installed\n"
  continue=N
else
  echo "$required" >> $logfile
  echo "----------------------------------------------------" >> $logfile
  envcheck="${envcheck}PHP CLI is present\n"
  php=`php -m 2>/dev/null`
  php_mod=`echo "$php" | grep bcmath`
  if [ "$php_mod" = "" ]
  then
    envcheck="${envcheck}php bcmath not installed\n"
    continue=N
  else
    echo "php bcmath is present" >> $logfile
    envcheck="${envcheck}php bcmath is present\n"
  fi
  php_mod=`echo "$php" | grep mhash`
  if [ "$php_mod" = "" ]
  then
    envcheck="${envcheck}php mhash not installed\n"
    continue=N
  else
    echo "php mhash is present" >> $logfile
    envcheck="${envcheck}php mhash is present\n"
  fi
  php_mod=`echo "$php" | grep pgsql`
  if [ "$php_mod" = "" ]
  then
    envcheck="${envcheck}php postgres not installed\n"
    continue=N
  else
    echo "php postgres is present" >> $logfile
    envcheck="${envcheck}php postgres is present\n"
  fi
fi
#
# Need to check path to php.ini
# Could use the php cli to do a phpinfo(), but this will return the
# location of the php cli php.ini which is different to the apache
# php.ini
#
php_ini=`php -i | grep "Loaded Configuration File" | cut -d'>' -f2`
php_cli=`dirname $php_ini`
php_root=`dirname $php_cli`
if [ ! -f "$php_root/apache2/php.ini" ]
then
  echo "cannot find php.ini file"
  exit -1
fi
php_memory=`grep memory $php_root/apache2/php.ini`
php_memory=${php_memory#*\=}
#php_memory=${php_memory%M *}
php_memory=`echo $php_memory | cut -d'M' -f1`
echo "PHP Memory set at ${php_memory}M"
if [ $php_memory -lt 160 ]
then
  envcheck="${envcheck}PHP memory parameter in /etc/php5/apache2/php.ini may be set too low\n"
  envcheck="${envcheck}PHP memory recommended minimum is 160M \n"
fi
#
required=`psql -V 2>/dev/null`
if [ $? -ne 0 ]
then
  envcheck="${envcheck}Postgres not installed\n"
  continue=N
else
  echo "$required" >> $logfile
  echo "----------------------------------------------------" >> $logfile
  envcheck="${envcheck}Postgres is present\n"
fi
echo -e $envcheck
echo -e $envcheck >> $logfile
if [ "$continue" = "N" ]
then
  echo "Please install the missing components and rerun this install"
  echo "----------------------------------------------------" >> $logfile
  echo "uzERP Installation aborted" `date` >> $logfile
  echo "----------------------------------------------------" >> $logfile
  echo "-----------------------------------------------------------------"
  exit -1
else
  echo ""
  echo "All required components are installed"
  echo ""
  echo "-----------------------------------------------------------------"
  echo "" >> $logfile
  echo "All required components are installed" >> $logfile
  echo "" >> $logfile
  echo "-----------------------------------------------------------------" >> $logfile
fi
if [ "$apache_user" = "" ]
then
  echo "Apache user not set - install aborted"
  echo "Apache user not set" >> $logfile
  echo "uzERP Installation aborted" `date` >> $logfile
  echo "----------------------------------------------------" >> $logfile
  exit -1
fi

db_path=$SCRIPTPATH/database/postgresql
uzerp_root=`dirname $SCRIPTPATH`
dbname=`basename $uzerp_root`
#
# Get the database name
#
echo -n "Database name [$dbname]: "
read value
if [ "$value" != "" ]
then
  dbname=$value
fi

#
# Create database
#
echo "┌────────────────────────────────────────────────────────────────┐"
echo "│                        Creating database                       │"                     
echo "└────────────────────────────────────────────────────────────────┘"
echo "┌────────────────────────────────────────────────────────────────┐" >> $logfile
echo "│                        Creating database                       │" >> $logfile                
echo "└────────────────────────────────────────────────────────────────┘" >> $logfile

echo ""
echo "Creating database: $dbname"

echo "" >> $logfile
echo "Creating database: $dbname" >> $logfile


users=`su -l postgres -c "psql -c '\du'"`
user=`echo $users | grep sysadmin`
if [ "$user" = "" ]
then
  echo "Creating sysadmin user"
  su -l postgres -c psql << !EOF
  CREATE ROLE "sysadmin" LOGIN
    SUPERUSER INHERIT CREATEDB CREATEROLE;
!EOF
  if [ $? -ne 0 ]
  then
    echo "Error creating www-data user - install aborted"
    echo "Error creating www-data user" >> $logfile
    echo "uzERP Installation aborted" `date` >> $logfile
    echo "----------------------------------------------------" >> $logfile
    exit -1
  fi
fi
user=`echo $users | grep www-data`
if [ "$user" = "" ]
then
  echo "Creating www-data user"
  su -l postgres -c psql << !EOF
  CREATE ROLE "www-data" LOGIN
    SUPERUSER INHERIT NOCREATEDB NOCREATEROLE;
!EOF
  if [ $? -ne 0 ]
  then
    echo "Error creating www-data user - install aborted"
    echo "Error creating www-data user" >> $logfile
    echo "uzERP Installation aborted" `date` >> $logfile
    echo "----------------------------------------------------" >> $logfile
    exit -1
  fi
fi
user=`echo $users | grep readonly`
if [ "$user" = "" ]
then
  echo "Creating readonly user"
  su -l postgres -c psql << !EOF
  CREATE ROLE "readonly"
    NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE;
!EOF
  if [ $? -ne 0 ]
  then
    echo "Error creating readonly user - install aborted"
    echo "Error creating readonly user" >> $logfile
    echo "uzERP Installation aborted" `date` >> $logfile
    echo "----------------------------------------------------" >> $logfile
    exit -1
  fi
fi
user=`echo $users | grep ooo-data`
if [ "$user" = "" ]
then
  echo "Creating ooo-data user"
  su -l postgres -c psql << !EOF
  CREATE ROLE "ooo-data" LOGIN
    NOSUPERUSER NOINHERIT NOCREATEDB NOCREATEROLE;
!EOF
  if [ $? -ne 0 ]
  then
    echo "Error creating ooo-data user - install aborted"
    echo "Error creating ooo-data user" >> $logfile
    echo "uzERP Installation aborted" `date` >> $logfile
    echo "----------------------------------------------------" >> $logfile
    exit -1
  fi
fi

#
# Check if database already exists
# If it does, check with user as to whether to drop the database
# or reuse it
#
createdb=Y
database=
databases=`su -l postgres -c "psql -c '\l'" | sed -n 4,/\eof/p | grep -v rows\) | grep -v template | awk {'print $1'}`
for i in $databases
do
  if [ "$i" = "$dbname" ]
  then
    database=$i
    break;
  fi
done
if [ "$database" != "" ]
then
  echo -n "Database $dbname already exists - do you want to delete it [N] : "
  read value
  if [ "$value" = "Y" -o "$value" = "y" ]
  then
    su -l postgres -c psql << !EOF >> $logfile
    DROP DATABASE "$dbname";
!EOF
    if [ $? -ne 0 ]
    then
      echo "Error dropping database $dbname - install aborted"
      echo "Error dropping database $dbname" >> $logfile
      echo "uzERP Installation aborted" `date` >> $logfile
      echo "----------------------------------------------------" >> $logfile
      exit -1
    fi
  else
    createdb=N
  fi
fi

if [ "$createdb" = "Y" ]
then
  su -l postgres -c psql << !EOF >> $logfile
  CREATE DATABASE "$dbname"
    WITH OWNER = "www-data"
    	 TEMPLATE = "template0"
         ENCODING = 'UTF8'
         LC_COLLATE = 'en_GB.UTF-8'
         LC_CTYPE = 'en_GB.UTF-8'
         CONNECTION LIMIT = -1;
!EOF
  if [ $? -ne 0 ]
  then
    echo "Error creating database $dbname - install aborted"
    echo "Error creating database $dbname" >> $logfile
    echo "uzERP Installation aborted" `date` >> $logfile
    echo "----------------------------------------------------" >> $logfile
    exit -1
  fi
  echo "----------------------------------------------------" >> $logfile
  if [ ! -d $db_path ]
  then
    echo "$db_path is missing - install aborted"
    echo "$db_path is missing - install aborted" >> $logfile
    echo "uzERP Installation aborted" `date` >> $logfile
    echo "----------------------------------------------------" >> $logfile
    exit -1
  fi
  echo "-------------------------------------------------------------"
  echo "Select a database template to use"
  echo "================================="
  database=
  cnt=0
  declare -a databases
  for i in `ls $db_path`
  do
    databases[$cnt]=$i
    cnt=$(($cnt + 1))
    echo "$cnt) $i"
  done
  echo "-------------------------------------------------------------"
  while [ "$database" = "" ]
  do
    echo -n "Enter 1-${#databases[@]} for database to use or Q to quit "
    read value
    if [ "${value:0:1}" = "q" -o "$value" = "Q" ]
    then
      exit -1
    fi
    check=`echo "$value" | grep "[^0-9]"`
    if [ "$value" = "" -o "$check" != "" ]
    then
      echo "Please enter a number from the above list"
    elif [ "$value" -lt 1 -o "$value" -gt ${#databases[@]} ]
    then
      echo "This number is not in the above list - please re-enter"
    else
      database=${databases[$(($value - 1))]}
    fi
  done
  db_path=$db_path/$database
  echo ""
  echo "Using database template $database"
  echo "" >> $logfile
  echo "Using database template $database" >> $logfile
  echo "" >> $logfile
  echo "-------------------------------------------------------------"
  echo "Importing uzERP database"
  echo "Importing uzERP database" >> $logfile
  echo ""
  echo "" >> $logfile
  su -l postgres -c "pg_restore -d $dbname $db_path" >> $logfile
  if [ $? -lt 0 ]
  then
    echo "Error importing uzERP database - install aborted"
    echo "Error importing uzERP database" >> $logfile
    echo "uzERP Installation aborted" `date` >> $logfile
    echo "----------------------------------------------------" >> $logfile
    exit -1
  fi
else
  echo "Using existing database $dbname"
  echo "Using existing database $dbname" >> $logfile
fi
if [ -f "$SCRIPTPATH/release_config" ]
then
  release_config=$SCRIPTPATH/release_config
elif [ -f "$install_dir/release_config" ]
then
  release_config=$install_dir/release_config
fi
#
# Update the supplied release_config with the database name
#
sed -i".bak" "/^database=/ s/=.*$/=$dbname/" $release_config
#
echo "------------------------------------------------------------------"
echo "┌────────────────────────────────────────────────────────────────┐"
echo "│                     Creating system config                     │"
echo "└────────────────────────────────────────────────────────────────┘"
echo "┌────────────────────────────────────────────────────────────────┐" >> $logfile
echo "│                     Creating system config                     │" >> $logfile
echo "└────────────────────────────────────────────────────────────────┘" >> $logfile
#
if [ ! -d $uzerp_root/conf ]
then
  su -l $apache_user -c "mkdir -p $uzerp_root/conf"
  if [ $? -ne 0 ]
  then
    echo "Failed to create directory $uzerp_root/conf"]
  fi
fi
#
domainname=`hostname --domain`
hostname=`hostname --fqdn`
admin_email=support@$domainname
echo -n "Admin email [$admin_email] : "
read value
if [ "$value" != "" ]
then
  admin_email=$value
fi
#
system_title="uzERP Live System"
echo -n "System Title [$system_title] : "
read value
if [ "$value" != "" ]
then
  system_title=$value
fi
sed -i".bak" "
/DB_NAME/s/uzerp-base/$dbname/
/SYSTEM_STATUS/s/uzERP Base Install/$system_title/
" $uzerp_root/$instance/conf/config.php
if [ ! -d $uzerp_root/data/company1 ]
then
  su -l $apache_user -c "mkdir -p $uzerp_root/data/company1"
  if [ $? -ne 0 ]
  then
    echo "Failed to create directory $uzerp_root/data/company1"]
  fi
fi
if [ ! -d $uzerp_root/data/templates_c ]
then
  su -l $apache_user -c "mkdir -p $uzerp_root/data/templates_c"
  if [ $? -ne 0 ]
  then
    echo "Failed to create directory $uzerp_root/data/templates_c"]
  fi
fi
if [ ! -d $uzerp_root/data/tmp ]
then
  su -l $apache_user -c "mkdir -p $uzerp_root/data/tmp"
  if [ $? -ne 0 ]
  then
    echo "Failed to create directory $uzerp_root/data/tmp"]
  fi
fi
#
echo "┌────────────────────────────────────────────────────────────────┐"
echo "│                  Creating Apache Virtual Host                  │"
echo "└────────────────────────────────────────────────────────────────┘"
echo "┌────────────────────────────────────────────────────────────────┐" >> $logfile
echo "│                  Creating Apache Virtual Host                  │" >> $logfile
echo "└────────────────────────────────────────────────────────────────┘" >> $logfile
#
echo "Found the following details:-"
echo "Domain name is $domainname"
echo "Host name is $hostname"
echo "Database name is $dbname"
servername=$dbname.$domainname
echo -n "Server Name [$servername] : "
read value
if [ "$value" != "" ]
then
  servername=$value
fi
site_dir=$apache_root/sites-available
while [ ! -d $site_dir ]
do
  echo -n "Enter the full path of the Apache sites-available directory or Q to quit : "
  read site_dir
  if [ "$site_dir" = "Q" ]
  then
    echo "Cannot findthe Apache sites-available directory" >> $logfile
    echo "uzERP Installation aborted at user request" `date` >> $logfile
    echo "----------------------------------------------------" >> $logfile
    exit -1
  fi
done
vh=`apache2ctl -S 2>/dev/null| grep "is a NameVirtualHost" | cut -d' ' -f1`
if [ "$vh" = "" ]
then
  echo "No NameVirtualHost directivefound - install aborted"
  echo "No NameVirtualHost directivefound" >> $logfile
  echo "uzERP Installation aborted" `date` >> $logfile
  echo "----------------------------------------------------" >> $logfile
  exit -1
fi
#
# Check the virtual hosts - if only one defined, use that
# otherwise prompt user to select from list of currently defined hosts
#
# May want to extend this in future to prompt for a port number
# and configure apache with the supplied port number
#
ports=( `apache2ctl -S 2>/dev/null| grep "is a NameVirtualHost" | cut -d' ' -f1` )
if [ "${#ports[@]}" -eq 0 ]
then
  echo "Cannot find any host:port information - please check your apache configuration"
  exit -1
elif [ "${#ports[@]}" -eq 1 ]
then
  vhp=${ports}
  echo "Apache is configured for only one Virtual Host"
else
  echo "-------------------------------------------------------------"
  echo "Apache is configured for the following Virtual Hosts"
  echo "-------------------------------------------------------------"
  cnt=${#ports[@]}
  for (( i = 0 ; i < cnt ; i++ ))
  do
    n=$(($i + 1))
    echo "$n) ${ports[$i]}"
  done
  vhp=
  echo "-------------------------------------------------------------"
  while [ "$vhp" = "" ]
  do
    echo -n "Enter 1-${#ports[@]} for host:port to use or Q to quit "
    read value
    if [ "${value:0:1}" = "q" -o "$value" = "Q" ]
    then
      exit -1
    fi
    check=`echo "$value" | grep "[^0-9]"`
    if [ "$value" = "" -o "$check" != "" ]
    then
      echo "Please enter a number from the above list"
    elif [ "$value" -lt 1 -o "$value" -gt ${#ports[@]} ]
    then
      echo "This number is not in the above list - please re-enter"
    else
      vhp=${ports[$(($value - 1))]}
    fi
  done
  echo "-------------------------------------------------------------"
fi
echo "The installation will use $vhp as the Virtual Host"
cat > $site_dir/$servername << EOF
<VirtualHost $vhp>
        ServerAdmin $admin_email
        DocumentRoot $uzerp_root
        ServerName $hostname
        ServerAlias $servername
        <Directory "$uzerp_root">
                Options FollowSymLinks
                AllowOverride None
                Order Allow,Deny
                allow from All
        </Directory>
</VirtualHost>
EOF
#
# Enabling uzERP Apache site
#
echo "┌────────────────────────────────────────────────────────────────┐"
echo "│        Enabling Apache uzERP site and reloading Apache         │"
echo "└────────────────────────────────────────────────────────────────┘"
echo "┌────────────────────────────────────────────────────────────────┐" >> $logfile
echo "│        Enabling Apache uzERP site and reloading Apache         │" >> $logfile
echo "└────────────────────────────────────────────────────────────────┘" >> $logfile
a2ensite $servername
if [ $? -ne 0 ]
then
  echo "Failed to enable uzERP Apache site"
  echo "Failed to enable uzERP Apache site" >> $logfile
  echo "----------------------------------------------------" >> $logfile
  echo "uzERP Installation aborted" `date` >> $logfile
  echo "----------------------------------------------------" >> $logfile
  exit -1
fi
#
# Restarting Apache
#
echo ""
/etc/init.d/apache2 reload
if [ $? -ne 0 ]
then
  echo ""
  echo "Failed to restart Apache"
  echo "Failed to restart Apache" >> $logfile
  a2dissite $servername
  /etc/init.d/apache2 reload
else
  echo ""
  echo "Apache restarted"
  echo "Apache restarted" >> $logfile
  echo ""
  echo "" >> $logfile
  echo "Checking access to uzERP"
  echo "Checking access to uzERP" >> $logfile
  checkpage=`wget --help 2>&1 | grep 'not found'`
  if [ "$checkpage" = "" ]
  then
    checkpage=`wget http://$servername -O getpage.txt 2>&1`
    addressfound=`echo "$checkpage" | grep 'wget: unable to resolve host address'`
    if [ "$addressfound" != "" ]
    then
      checkhosts=`grep "$servername" /etc/hosts`
      if [ "$checkhosts" = "" ]
      then
        sed -ibak -e"/localhost/ s/$/ $servername/" /etc/hosts
        if [ $? -ne 0 ]
        then
          echo "Unable to change hosts file"
          echo "Unable to change hosts file" >> $logfile
        else
          echo "$servername added to hosts file"
          echo "$servername added to hosts file" >> $logfile
          checkpage=`wget http://$servername -O getpage.txt 2>&1`
        fi
      else
        echo $checkpage
        echo $checkpage >> $logfile
      fi
    fi
    connected=`echo "$checkpage" | grep -c "connected"`
    saved=`echo "$checkpage" | grep -c "saved"`
    if [ $connected -eq 1 -a $saved -eq 1 ]
    then
      login=`grep -c "login" getpage.txt`
      username=`grep -c "username" getpage.txt`
      passwd=`grep -c "password" getpage.txt`
      if [ $login -gt 0 -a $username -gt 0 -a $passwd -gt 0 ]
      then
        echo "Access to uzERP at $servername successful"
        echo "Access to uzERP at $servername successful" >> $logfile
      else
        echo "Access to uzERP at $servername failed"
        echo "Access to uzERP at $servername failed" >> $logfile
      fi
    else
      echo "Unable to access $servername"
      echo "Unable to access $servername" >> $logfile
    fi
    if [ -f getpage.txt ]
    then
      rm getpage.txt
    fi
  fi
fi
echo "-----------------------------------------------------------------"
rundate=`date`
echo "uzERP Installation - ended $rundate"
echo "uzERP Installation - ended $rundate" >> $logfile
echo "-----------------------------------------------------------------"
